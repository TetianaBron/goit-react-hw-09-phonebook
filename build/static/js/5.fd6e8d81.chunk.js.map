{"version":3,"sources":["redux/phoneBook/phoneBook-selectors.js","components/Notification/Notification.js","pages/LoginPage.js"],"names":["getFilter","state","phoneBook","filter","getAllContacts","contacts","selectors","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","getError","error","Notification","this","props","errorAuth","setTimeout","clearErrorAuth","errorPb","clearErrorPb","in","message","timeout","classNames","unmountOnExit","className","Component","connect","authSelectors","dispatch","phoneBookActions","authActions","clearError","LoginPage","email","password","handleChange","target","value","setState","handleSubmit","e","preventDefault","onLogin","appear","isLoadingAuth","onSubmit","autoComplete","htmlFor","type","onChange","mapDispatchToProps","authOperations","logIn"],"mappings":"gJAAA,YAIMA,EAAY,SAAAC,GAAK,OAAIA,EAAMC,UAAUC,QAErCC,EAAiB,SAAAH,GAAK,OAAIA,EAAMC,UAAUG,UA2B1CC,EAAY,CACdC,WAhCe,SAAAN,GAAK,OAAIA,EAAMC,UAAUM,SAiCxCR,YACAS,mBAduBC,YACvB,CAACN,EAAgBJ,IACjB,SAACK,EAAUF,GACN,IAAMQ,EAAmBR,EAAOS,cAErC,OAAOP,EAASF,QAAO,qBAAGU,KACjBD,cAAcE,SAASH,SAShCP,iBACAW,SA9Ba,SAAAd,GAAK,OAAIA,EAAMC,UAAUc,QAiC3BV,O,6IC/BTW,E,mLAUoB,IAAD,OACZC,KAAKC,MAAMC,UACZC,YAAW,WACP,EAAKF,MAAMG,eAAe,EAAKrB,SAChC,MAGAiB,KAAKC,MAAMI,SACdF,YAAW,WACP,EAAKF,MAAMK,aAAa,EAAKvB,SAC9B,Q,+BAMP,OACI,cAAC,IAAD,CACAwB,GAAIP,KAAKC,MAAMO,QACfC,QAAS,IACTC,WAAW,oBACXC,eAAa,EAJb,SAMJ,qBAAKC,UAAU,UAAf,SACA,mBAAGA,UAAU,eAAb,SACKZ,KAAKC,MAAMO,kB,GAnCGK,aAqDZC,iBAVS,SAAC/B,GAAD,MAAY,CAChCsB,QAASjB,IAAUS,SAASd,GAC5BmB,UAAWa,IAAclB,SAASd,OAGX,SAAAiC,GAAQ,MAAK,CACpCV,aAAc,kBAAMU,EAASC,QAC7Bb,eAAgB,kBAAMY,EAASE,IAAYC,kBAGhCL,CAA6Cf,I,yKCtDtDqB,E,4MAMJrC,MAAQ,CACNsC,MAAO,GACPC,SAAU,I,EAGZC,aAAe,YAAkC,IAAD,IAA9BC,OAAU7B,EAAoB,EAApBA,KAAM8B,EAAc,EAAdA,MAChC,EAAKC,SAAL,eAAiB/B,EAAO8B,K,EAG1BE,aAAe,SAAAC,GACbA,EAAEC,iBAEA,EAAK5B,MAAM6B,QAAQ,EAAK/C,OAExB,EAAK2C,SAAS,CAAE/B,KAAM,GAAI0B,MAAO,GAAIC,SAAU,M,uDAGzC,IAAD,EACqBtB,KAAKjB,MAAzBsC,EADD,EACCA,MAAOC,EADR,EACQA,SAEf,OACE,gCACG,cAAC,IAAD,CACIf,IAAI,EACJwB,QAAQ,EACRtB,QAAS,IACTC,WAAW,gBACXC,eAAa,EALjB,SAOI,oBAAIC,UAAU,QAAd,+BAIL,cAAC,IAAD,CACIJ,QAASR,KAAKC,MAAMH,QAGvBE,KAAKC,MAAM+B,eAAiB,cAAC,IAAD,IAE7B,uBACEpB,UAAU,OACVqB,SAAUjC,KAAK2B,aACfO,aAAa,MAHf,UAIE,uBACEC,QAAQ,QACRvB,UAAU,QAFZ,oBAIE,uBACEA,UAAU,QACVwB,KAAK,QACLzC,KAAK,QACL8B,MAAOJ,EACPgB,SAAUrC,KAAKuB,eAInB,uBACEY,QAAQ,WACRvB,UAAU,QAFZ,sBAIE,uBACEA,UAAU,QACVwB,KAAK,WACLzC,KAAK,WACL8B,MAAOH,EACPe,SAAUrC,KAAKuB,eAInB,wBACEX,UAAU,SACVwB,KAAK,SAFP,6B,GA3EcvB,aAyFlByB,EAAqB,CACzBR,QAASS,IAAeC,OAGX1B,uBATS,SAAC/B,GAAD,MAAY,CAClCe,MAAOiB,IAAclB,SAASd,GAC9BiD,cAAejB,IAAc1B,WAAWN,MAOFuD,EAAzBxB,CAA6CM","file":"static/js/5.fd6e8d81.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.phoneBook.loading;\r\n\r\nconst getFilter = state => state.phoneBook.filter;\r\n\r\nconst getAllContacts = state => state.phoneBook.contacts;\r\n\r\nconst getError = state => state.phoneBook.error;\r\n\r\n//Без мемоизации\r\n// const getVisibleContacts = state => {\r\n//     const contacts = getAllContacts(state);\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n\r\n//     return contacts.filter(({ name }) =>\r\n//         name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n// };\r\n\r\n//С мемоизацией\r\nconst getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => { \r\n         const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ name }) =>\r\n        name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n    },\r\n);\r\n\r\nconst selectors = {\r\n    getLoading,\r\n    getFilter,\r\n    getVisibleContacts,\r\n    getAllContacts,\r\n    getError\r\n};\r\n\r\nexport default selectors;","import React, { Component } from 'react';\r\nimport * as phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport './Notification.scss';\r\nimport selectors from '../../redux/phoneBook/phoneBook-selectors';\r\nimport authSelectors from '../../redux/auth/auth-selectors';\r\nimport authActions from '../../redux/auth/auth-actions';\r\n\r\nclass Notification extends Component {\r\n    static propTypes = {\r\n        message: PropTypes.string,\r\n        errorPb: PropTypes.object,\r\n        errorAuth: PropTypes.string,\r\n        clearErrorPb: PropTypes.func,\r\n        clearErrorPAuth: PropTypes.func\r\n    };\r\n   \r\n   \r\n    componentDidUpdate() {\r\n         if (this.props.errorAuth) {\r\n            setTimeout(() => {\r\n                this.props.clearErrorAuth(this.state);\r\n            }, 2500);\r\n             return;\r\n        }\r\n           if (this.props.errorPb) {\r\n            setTimeout(() => {\r\n                this.props.clearErrorPb(this.state);\r\n            }, 2500);\r\n             return;\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <CSSTransition\r\n            in={this.props.message}\r\n            timeout={250}\r\n            classNames=\"Notification-fade\"\r\n            unmountOnExit>\r\n            \r\n        <div className=\"Overlay\">\r\n        <p className=\"Notification\">\r\n            {this.props.message}\r\n        </p>\r\n        </div>\r\n        </CSSTransition>\r\n        );\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    errorPb: selectors.getError(state),\r\n    errorAuth: authSelectors.getError(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    clearErrorPb: () => dispatch(phoneBookActions.clearError()),\r\n    clearErrorAuth: () => dispatch(authActions.clearError())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Notification);\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport authOperations from '../redux/auth/auth-operations.js';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\nimport Notification from '../components/Notification/Notification';\r\nimport Spinner from '../components/Spinner/Spinner';\r\n\r\nclass LoginPage extends Component {\r\n  static propTypes = {\r\n    error: PropTypes.string,\r\n    isLoadingAuth: PropTypes.bool,\r\n  };\r\n  \r\n  state = {\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  handleChange = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n      this.props.onLogin(this.state);\r\n\r\n      this.setState({ name: '', email: '', password: '' });\r\n    };\r\n\r\n  render() {\r\n    const { email, password } = this.state;\r\n\r\n    return (\r\n      <div>\r\n         <CSSTransition\r\n             in={true}\r\n             appear={true}\r\n             timeout={500}\r\n             classNames=\"Title-SlideIn\"\r\n             unmountOnExit\r\n             >\r\n             <h1 className=\"Title\">Enter your data</h1>\r\n         </CSSTransition>\r\n\r\n        \r\n        <Notification\r\n            message={this.props.error}\r\n          />\r\n        \r\n        {this.props.isLoadingAuth && <Spinner />}\r\n        \r\n        <form\r\n          className=\"Form\"\r\n          onSubmit={this.handleSubmit}\r\n          autoComplete=\"off\">\r\n          <label\r\n            htmlFor=\"email\"\r\n            className=\"Label\">\r\n            Email </label>\r\n            <input\r\n              className=\"Input\"\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={this.handleChange}\r\n            />\r\n         \r\n\r\n          <label\r\n            htmlFor=\"password\"\r\n            className=\"Label\">\r\n            Password</label>\r\n            <input\r\n              className=\"Input\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={this.handleChange}\r\n            />\r\n          \r\n\r\n          <button\r\n            className=\"Button\"\r\n            type=\"submit\">Login</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  error: authSelectors.getError(state),\r\n  isLoadingAuth: authSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogin: authOperations.logIn,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\r\n\r\n"],"sourceRoot":""}